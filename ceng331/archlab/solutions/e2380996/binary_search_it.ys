# MERT ULUDOĞAN 2380996


#implement your code below (DO NOT CHANGE/REMOVE THIS COMMENT)



# mid = rcx
# initial_begin = rbx
# begin = rdi ; end = rsi ; value ; rdx

binary_search: # necessary immediates are stored - r8 used to iterate over quad arrays
    irmovq $8, %r10
    irmovq $2, %r11
    rrmovq %rdi, %rbx
loop:
loop_case:
    rrmovq %rsi, %rax
    subq %rdi, %rax
    jle failure
calculate_mid: # calculation of mid pointer of array and getting corresponding value
    rrmovq %rsi, %rcx # rcx = end
    subq %rdi, %rcx # rcx = end - begin
    dvvq %r10, %rcx # rcx = end - begin, in quad range (divided by 8)
    dvvq %r11, %rcx # rcx = (end - begin) / 2
    mllq %r10, %rcx # rcx = (end - begin) / 2, in normal range again (needs +-8 for iterations)
    addq %rdi, %rcx # mid pointer calculated
    mrmovq (%rcx), %rax # mid value
check_mid: 
    subq %rdx, %rax # mid - value
    je success # mid == value
    jl mid_less # mid < value
mid_greater_eq: # mid > value
    rrmovq %rcx, %rsi # end = mid
    jmp loop
mid_less: # mid < value
    rrmovq %rcx, %rdi
    addq %r10, %rdi # begin = mid + 1
    jmp loop
success:
    subq %rbx, %rcx
    dvvq %r10, %rcx
    irmovq $1, %rax
    addq %rcx, %rax # mid - initial_begin + 1
    ret 
failure: # loop case termination
    irmovq $-1, %rax
    ret

#implement your code above (DO NOT CHANGE/REMOVE THIS COMMENT)

.pos 0x1F00
stack:
    .quad 0

