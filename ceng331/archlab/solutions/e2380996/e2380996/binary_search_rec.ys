# MERT ULUDOĞAN 2380996


#implement your code below (DO NOT CHANGE/REMOVE THIS COMMENT)

# mid = rcx
# mid_v = r12
# initial_begin = rbx
# begin = rdi ; end = rsi ; value ; rdx

binary_search: # just used to start recursive search, after adding necessary immediates
    irmovq $8, %r10
    irmovq $2, %r11
    call binary_search_helper
    ret
binary_search_helper: # main recursive function
    rrmovq %rsi, %rcx
    subq %rdi, %rcx
    dvvq %r10, %rcx
    dvvq %r11, %rcx
    mllq %r10, %rcx
    addq %rdi, %rcx
    mrmovq (%rcx), %r12 # calculation of mid value
    rrmovq %rdi, %r13
    subq %rsi, %r13
    jge terminate_case 
    rrmovq %r12, %rax # rax = mid
    subq %rdx, %rax # mid - value
    je equal_case # mid == value
    jl up_case # mid < value (up means go to upper array)
down_case: # mid > value
    rrmovq %rcx, %rsi # new end = current mid
    call binary_search_helper
    ret
up_case: # mid < value
    rrmovq %rcx, %r13
    subq %rdi, %r13
    dvvq %r10, %r13
    irmovq $1, %r14
    addq %r14, %r13
    pushq %r13, stack # (mid - begin + 1) is saved to use it after recursive call
    rrmovq %rcx, %rdi
    addq %r10, %rdi # new begin = current mid + 1 (8 in y86)
    call binary_search_helper
    popq %r8 # used to saved value
    irmovq $-1, %r13
    subq %rax, %r13 # tmp != -1 control computation
    jne u_1
    ret # tmp == -1
    u_1: # tmp != -1
        addq %r8, %rax
        ret

equal_case: # mid == value
    rrmovq %rcx, %rax
    subq %rdi, %rax
    dvvq %r10, %rax
    irmovq $1, %r13
    addq %r13, %rax
    ret # mid - begin + 1 is calculated and returned
terminate_case:
    irmovq $-1, %rax
    ret


#implement your code above (DO NOT CHANGE/REMOVE THIS COMMENT)

.pos 0x2F00
stack:
    .quad 0

